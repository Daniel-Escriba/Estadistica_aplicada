knitr::opts_chunk$set(echo = TRUE)
data = read.table("hotel.txt" , sep="", header=T)
data = data[-1]
data
summary(data)
x = data$Habitaciones
y = data$Ingreso
plot(x=x, y=y,
pch=18, col="blue",
xlab="Habitaciones",
ylab="Ingreso",
main="Diagrama de dispersion")
modelo = lm(y ~ x)
#summary(modelo)
modelo$coefficients
plot(y ~ x ,
pch=15, col="blue",
xlab="Habitaciones", ylab="Ingreso", main="Diagrama de dispersion")
abline(modelo, col='red', lwd=2)
habitaciones = data.frame(x=70)
habitaciones
ingreso_est = predict(object = modelo, newdata = habitaciones)
ingreso_est
habitaciones = data.frame(x=seq(70, 200, 10))
habitaciones
ingreso_est = predict(object = modelo, newdata = habitaciones)
as.data.frame(ingreso_est)
habitaciones = data.frame(x=70)
habitaciones
ingreso_est = predict(object = modelo, newdata = habitaciones)
ingreso_est
habitaciones = data.frame(x=seq(70, 200, 10))
habitaciones
ingreso_est = predict(object = modelo, newdata = habitaciones)
as.data.frame(ingreso_est)
modelo = lm(y ~ x)
summary(modelo)
modelo$coefficients
knitr::opts_chunk$set(echo = TRUE)
data = read.table("entrega.txt" , sep="", header=T)
data = data[-1]
data
data = read.table("entrega.txt" , sep="", header=T)
data = data[-1]
data
summary(data)
summary(data)
x = data$Habitaciones
y = data$Ingreso
plot(x=x, y=y,
pch=18, col="blue",
xlab="Habitaciones",
ylab="Ingreso",
main="Diagrama de dispersion")
x = data$distancia.millas
y = data$T.envio.dias
plot(x=x, y=y,
pch=18, col="blue",
xlab="Distancias (millas)",
ylab="Tiempo de envio en (dias)",
main="Diagrama de dispersion")
modelo = lm(y ~ x)
summary(modelo)
modelo$coefficients
plot(y ~ x ,
pch=15, col="blue",
xlab="Distancias (millas)", ylab="Tiempo de envio en (dias)", main="Diagrama de dispersion")
abline(modelo, col='red', lwd=2)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
distancias_futuras
ingreso_est = predict(object = modelo, newdata = distancias_futuras)
as.data.frame(ingreso_est)
modelo = lm(y ~ x)
#summary(modelo)
modelo$coefficients
x = data$distancia.millas
y = data$T.envio.dias
plot(x=x, y=y,
pch=18, col="blue",
xlab="Distancias (millas)",
ylab="Tiempo de envio en (dias)",
main="Diagrama de dispersion")
data = read.table("entrega.txt" , sep="", header=T)
data = data[-1]
data
summary(data)
summary(data)
x = data$distancia.millas
y = data$T.envio.dias
plot(x=x, y=y,
pch=18, col="blue",
xlab="Distancias (millas)",
ylab="Tiempo de envio en (dias)",
main="Diagrama de dispersion")
data = read.table("entrega.txt" , sep="", header=T)
data = data[-1]
data
summary(data)
x = data$distancia.millas
y = data$T.envio.dias
plot(x=x, y=y,
pch=18, col="blue",
xlab="Distancias (millas)",
ylab="Tiempo de envio en (dias)",
main="Diagrama de dispersion")
modelo = lm(y ~ x)
#summary(modelo)
modelo$coefficients
modelo = lm(y ~ x)
#summary(modelo)
modelo$coefficients
modelo = lm(y ~ x)
summary(modelo)
modelo$coefficients
#Leemos el archivo redactado
data = read.table("entrega.txt" , sep="", header=T)
data = data[-1]
data
# Revisamos  los estadisticos
summary(data)
x = data$distancia.millas
y = data$T.envio.dias
plot(x=x, y=y,
pch=18, col="blue",
xlab="Distancias (millas)",
ylab="Tiempo de envio en (dias)",
main="Diagrama de dispersion")
modelo = lm(y ~ x)
#summary(modelo)
modelo$coefficients
plot(y ~ x ,
pch=15, col="blue",
xlab="Distancias (millas)", ylab="Tiempo de envio en (dias)", main="Diagrama de dispersion")
abline(modelo, col='red', lwd=2)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
distancias_futuras
ingreso_est = predict(object = modelo, newdata = distancias_futuras)
as.data.frame(ingreso_est)
modelo = lm(y ~ x)
#summary(modelo)
modelo$coefficients
plot(y ~ x ,
pch=15, col="blue",
xlab="Distancias (millas)", ylab="Tiempo de envio en (dias)", main="Diagrama de dispersion")
abline(modelo, col='red', lwd=2)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
distancias_futuras
ingreso_est = predict(object = modelo, newdata = distancias_futuras)
as.data.frame(ingreso_est)
#Leemos el archivo redactado
data = read.table("entrega.txt" , sep="", header=T)
data = data[-1]
data
# Revisamos  los estadisticos
summary(data)
x = data$distancia.millas
y = data$T.envio.dias
plot(x=x, y=y,
pch=18, col="blue",
xlab="Distancias (millas)",
ylab="Tiempo de envio en (dias)",
main="Diagrama de dispersion")
modelo = lm(y ~ x)
#summary(modelo)
modelo$coefficients
plot(y ~ x ,
pch=15, col="blue",
xlab="Distancias (millas)", ylab="Tiempo de envio en (dias)", main="Diagrama de dispersion")
abline(modelo, col='red', lwd=2)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
distancias_futuras
ingreso_est = predict(object = modelo, newdata = distancias_futuras)
as.data.frame(ingreso_est)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
distancias_futuras
ingreso_est = predict(object = modelo, newdata = distancias_futuras)
as.data.frame(dias_est)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
distancias_futuras
dias_est = predict(object = modelo, newdata = distancias_futuras)
as.data.frame(dias_est)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
distancias_futuras
# Combinar distancias y predicciones en un solo data frame
resultados = data.frame(Distancia = distancias_futuras$x,
Prediccion = dias_est)
# Mostrar el data frame
resultados
distancias_futuras = data.frame(x=seq(900, 1000, 10))
distancias_futuras
# Combinar distancias y predicciones en un solo data frame
resultados = data.frame(Distancia = distancias_futuras$x,
Prediccion = dias_est)
# Mostrar el data frame
resultados
# Si quieres una visualizaci칩n m치s elegante, puedes usar:
# library(knitr)
# kable(resultados, digits = 5)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
# Combinar distancias y predicciones en un solo data frame
resultados = data.frame(Distancia = distancias_futuras$x,
Prediccion = dias_est)
# Mostrar el data frame
resultados
# Si quieres una visualizaci칩n m치s elegante, puedes usar:
library(knitr)
kable(resultados, digits = 5)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
# Combinar distancias y predicciones en un solo data frame
resultados = data.frame(Distancia = distancias_futuras$x,
Prediccion = dias_est)
# Mostrar el data frame
# utilizamos la siguiente libreria, para una mejor visualizacion
library(knitr)
kable(resultados, digits = 5)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
# Combinar distancias y predicciones en un solo data frame
resultados = data.frame(Distancia = distancias_futuras$x,
"Dias estimados" = dias_est)
# Mostrar el data frame
# utilizamos la siguiente libreria, para una mejor visualizacion
library(knitr)
kable(resultados, digits = 5)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
# Combinar distancias y predicciones en un solo data frame
resultados = data.frame(Distancia = distancias_futuras$x,
Dias_estimados = dias_est)
# Mostrar el data frame
# utilizamos la siguiente libreria, para una mejor visualizacion
library(knitr)
kable(resultados, digits = 5)
#Leemos el archivo redactado
data = read.table("entrega.txt" , sep="", header=T)
data = data[-1]
data
# Revisamos  los estadisticos
summary(data)
x = data$distancia.millas
y = data$T.envio.dias
plot(x=x, y=y,
pch=18, col="blue",
xlab="Distancias (millas)",
ylab="Tiempo de envio en (dias)",
main="Diagrama de dispersion")
modelo = lm(y ~ x)
#summary(modelo)
modelo$coefficients
plot(y ~ x ,
pch=15, col="blue",
xlab="Distancias (millas)", ylab="Tiempo de envio en (dias)", main="Diagrama de dispersion")
abline(modelo, col='red', lwd=2)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
# Combinar distancias y predicciones en un solo data frame
resultados = data.frame(Distancia = distancias_futuras$x,
Dias_estimados = dias_est)
# Mostrar el data frame
# utilizamos la siguiente libreria, para una mejor visualizacion
library(knitr)
kable(resultados, digits = 5)
#Leemos el archivo redactado
data = read.table("entrega.txt" , sep="", header=T)
data = data[-1]
data
# Revisamos  los estadisticos
summary(data)
x = data$distancia.millas
y = data$T.envio.dias
plot(x=x, y=y,
pch=18, col="blue",
xlab="Distancias (millas)",
ylab="Tiempo de envio en (dias)",
main="Diagrama de dispersion")
modelo = lm(y ~ x)
#summary(modelo)
modelo$coefficients
plot(y ~ x ,
pch=15, col="blue",
xlab="Distancias (millas)", ylab="Tiempo de envio en (dias)", main="Diagrama de dispersion")
abline(modelo, col='red', lwd=2)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
# Hacer las predicciones
dias_est = predict(object = modelo, newdata = distancias_futuras)
# Combinar distancias y predicciones en un solo data frame
resultados = data.frame(Distancia = distancias_futuras$x,
Dias_estimados = dias_est)
# Mostrar el data frame
# utilizamos la siguiente libreria, para una mejor visualizacion
library(knitr)
kable(resultados, digits = 5)
#Leemos el archivo redactado
data = read.table("entrega.txt" , sep="", header=T)
data = data[-1]
data
# Revisamos  los estadisticos
summary(data)
x = data$distancia.millas
y = data$T.envio.dias
plot(x=x, y=y,
pch=18, col="blue",
xlab="Distancias (millas)",
ylab="Tiempo de envio en (dias)",
main="Diagrama de dispersion")
modelo = lm(y ~ x)
#summary(modelo)
modelo$coefficients
plot(y ~ x ,
pch=15, col="blue",
xlab="Distancias (millas)", ylab="Tiempo de envio en (dias)", main="Diagrama de dispersion")
abline(modelo, col='red', lwd=2)
distancias_futuras = data.frame(x=seq(900, 1000, 10))
# Hacer las predicciones
dias_est = predict(object = modelo, newdata = distancias_futuras)
# Combinar distancias y predicciones en un solo data frame
resultados = data.frame(Distancia = distancias_futuras$x,
Dias_estimados = dias_est)
# Mostrar el data frame
# utilizamos la siguiente libreria, para una mejor visualizacion
library(knitr)
kable(resultados, digits = 5)
knitr::opts_chunk$set(echo = TRUE)
y_futuro = predict(object=modelo, interval="prediction",
level=0.98)
dim(y_futuro)
y_futuro
data_nueva = cbind(data, y_futuro) # cbind
data_nueva
library(ggplot2)
ggplot(data = data_nueva, aes (x=Cajas, y=Tiempo)) +
geom_point (col="red") +
geom_smooth(method=lm, formula= y~x,
se=T, level=nc,
col="blue", fill="orange") +
geom_line(aes(y=lwr), color="purple", linetype="dashed") +
geom_line(aes(y=upr), color="purple", linetype="dashed") +
theme_light()
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(pander)
data = read_excel("delivery.xlsx", sheet="Hoja1")
data = data[-1]
data = as.data.frame(data)
# Usar pander para formatear la tabla
pander(data, caption = "Tabla de datos de delivery")
x = data$Cajas
y = data$Tiempo
modelo = lm(y ~ x)
summary(modelo)
modelo$coefficients
# Gr치fico de dispersi칩n
plot(x, y, main = "Diagrama de Dispersion",
xlab = "Cajas", ylab = "Tiempo", pch = 19, col = "blue")
# Agregar l칤nea de regresi칩n
abline(modelo, col = "red", lwd = 2)
# Nivel de confianza
nc = 0.98
nuevo = data.frame(x=150) # cajas entregadas = 150
predict(object=modelo, newdata=nuevo, int="confidence",
level=nc)
nuevo = data.frame(x=150) # cajas entregadas= 3000
predict(object=modelo, newdata=nuevo, interval="prediction",
level=nc)
y_futuro = predict(object=modelo, interval="prediction",
level=0.98)
dim(y_futuro)
y_futuro
data_nueva = cbind(data, y_futuro) # cbind
data_nueva
library(ggplot2)
ggplot(data = data_nueva, aes (x=Cajas, y=Tiempo)) +
geom_point (col="red") +
geom_smooth(method=lm, formula= y~x,
se=T, level=nc,
col="blue", fill="orange") +
geom_line(aes(y=lwr), color="purple", linetype="dashed") +
geom_line(aes(y=upr), color="purple", linetype="dashed") +
theme_light()
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
#file.choose()
#"C:\\Users\\User\\Downloads\\2023-1\\Estadistica_Aplicada\\Sesion06\\almac칠n.xls"
ruta_excel = "almac칠n.xlsx"
excel_sheets(ruta_excel)
data = read_excel(ruta_excel, sheet="Hoja1")
data = data[-1]
data = as.data.frame(data)
data
data = read_excel(ruta_excel, sheet="Hoja1")
data = data[-1]
data = as.data.frame(data)
data
x = data$Ordenes
y = data$Costos
modelo = lm(y ~ x)
summary(modelo)
modelo$coefficients
plot(y~x, pch=20,
col="red",
xlab="ordenes", ylab="Costos", main="Diagrama de dispersi칩n")
abline(modelo,col="blue")
# Nivel de confianza
nc = 0.95
confint(object = modelo, parm = 1, level = 0.95)
val_crit_22_gl = qt(p = 0.05/2, df=24-2)
cat("val_crit_22_gl = ", val_crit_22_gl)
lim_2.5 = 0.457625 + qt(p = 0.05/2, df=22) *
6.571883 # obtenido de summary (error std del intercepto)
lim_97.5 = 0.457625 - qt(p = 0.05/2, df=22) *
6.571883
cat("\n\n")
cat("\t2.5%", "   97.5%")
cat("\n", lim_2.5, lim_97.5)
confint(object = modelo, parm = 2, level = nc)
val_crit_22_gl = qt(p = 0.05/2, df=24-2)
# qt(p = 1 - 0.05/2, df=22)
cat("val_crit_22_gl = ", val_crit_22_gl)
lim_2.5 = 0.01611756 + qt(p = 0.05/2, df=22) *
0.001476 # obtenido de summary (error std de x)
lim_97.5 = 0.01611756 - qt(p = 0.05/2, df=22) *
0.001476
cat("\n\n")
cat("\t2.5%", "   97.5%")
cat("\n", lim_2.5, lim_97.5)
# Nivel de confianza
nc = 0.95
nuevo = data.frame(x=3000) # ordenes = 3000
predict(object=modelo, newdata=nuevo, int="confidence",
level=nc)
nuevo = data.frame(x=3000) # Ordenes = 3000
predict(object=modelo, newdata=nuevo, interval="prediction",
level=nc)
y_futuro = predict(object=modelo, interval="prediction",
level=0.95)
dim(y_futuro)
y_futuro
data_nueva = cbind(data, y_futuro) # cbind
data_nueva
library(ggplot2)
ggplot(data = data_nueva, aes (x=Ordenes, y=Costos)) +
geom_point (col="red") +
geom_smooth(method=lm, formula= y~x,
se=T, level=nc,
col="blue", fill="orange") +
geom_line(aes(y=lwr), color="purple", linetype="dashed") +
geom_line(aes(y=upr), color="purple", linetype="dashed") +
theme_light()
