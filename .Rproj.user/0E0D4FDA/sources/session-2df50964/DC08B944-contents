---
title: "GLAB04 Correlacion"
author: "EFN"
date: "2023-04-l7"
output:
  pdf_document:
    toc: true
    toc_depth: 2
  html_document: 
    toc: true
    toc_depth: 2
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## SEMANA 4: COEFICIENTE DE CORRELACION

#### GUIA DE LABORATORIO

Revise junto con el docente el ejemplo de aplicación para que luego pueda resolver el caso de aplicación propuesto.

#### EJEMPLO DE APLICACIÓN

l. Primero creamos un archivo R Markdown, colocando un título y autor que irán en la cabecera.

2. Ahora leeremos la base de datos llamada “canes”, la cual contiene información sobre el peso de un grupo de canes (en libras) y su consumo de alimento diario (medido en tazas estándar). Esta vez se trabajará con un documento de Excel. Para ello se instalará el paquete “readxl” en la consola, luego se llama a esta con ‘library(readxl)’. Debemos buscar la ruta de nuestro archivo por medio de file.choose().

## Importando librería para archivos de Excel
```{r importando}
library(readxl)
# file.choose()
```

3. Asignamos la ruta de nuestro archivo a una variable (para este caso 'ruta_excel' y si queremos ver cuáles son los nombres de las hojas de nuestro documento de Excel utilizamos excel_sheets(). Una vez hecho esto podemos desechar o poner como comentario file.choose().

```{r}

#ruta_excel = "C:\\Users\\User\\Downloads\\2023-1\\Estadistica_Aplicada\\Sesion04\\canes.xlsx"
#ruta_excel ="C:/Users/enrique/Downloads/2024-2/Estadistica_Aplicada/Sesion04/canes.xlsx"

ruta_excel = "canes.xlsx"

excel_sheets(ruta_excel)
```

4. Para leer la primera hoja, usamos la función read_excel() y colocando como parámetro "sheet="Hoja1”. Usamos la función as.data.frame() para mostrarlo como un data frame clásico.

## Leyendo la base de datos

```{r}
data = read_excel (ruta_excel, sheet="Hoja1")

data = data[-1]
data = as.data.frame(data)
data
```

5. Para hacer un diagrama de dispersión entre dos variables continuas, podemos hacer uso de la función pairs(). Otra forma de hacerlo es mediante la función chart.Correlation(), pero previamente debemos instalar el paquete PerformanceAnalytics desde la consola. En esta se muestra no solo el valor de coeficiente de correlación, sino la gráfica de la distribución para cada variable.

```{r diagrama, message=FALSE, warning=FALSE}
pairs(data)

library(PerformanceAnalytics)
chart.Correlation(data)
```

6. Podemos hallar la matriz de correlación usando la función cor() colocando como parámetro la data. Si queremos que se muestre solo el valor del coeficiente de correlación, extraemos del dataframe cada variable por separado y aplicamos la función cor() para ambas variables. 

## Calculando el coeficiente de correlación y de determinación

```{r correlacion}
colnames(data)
```

```{r matriz correlacion}

cor(data) # Matriz de correlación
```
Para calcular el coeficiente de determinación solo debemos elevar al cuadrado el valor del coeficiente de correlación.

```{r}
x = data$Peso
y = data$Consumo

coef_corr = cor(x, y, method = "pearson")
coef_corr # Coeficiente de correlacion

coef_deter = coef_corr^2
coef_deter # Coeficiente de determinacion
```

7. Uno de los supuestos del coeficiente de correlación de Pearson es que las variables tengan distribución normal univariada. Para verificar esto podemos usar la función shapiro.test().

#### Prueba de supuestos para el coeficiente de Pearson

```{r supuestos}

shapiro.test(x)
```
Ya que p-value > 0.05 se acepta que la variable peso sigue una distribución normal.

#### Coeficiente de correlación de Spearman

8. En caso no se cumplan los supuestos de normalidad, debemos calcular el coeficiente de correlación de Spearman utilizando para ello la función cor() pero agregando como parámetro method="spearman”. 

```{r message=FALSE, warning=FALSE}

cor(x, y, method="spearman")
```

Si queremos ver si este coeficiente es significativo, podemos usar la función cor.test().

```{r}
cor.test(x, y, method="spearman")
```

#### Representación gráfica de las correlaciones

9. Existe una alternativa más para hacer la representación gráfica de la correlación a través de la función corrplot(). Previamente debemos instalar el paquete ‘corrplot’. Si queremos obtener ayuda de esta u otras funciones, delante de ella escribimos el símbolo ?.

```{r grafica, message=FALSE, warning=FALSE}
library(corrplot)

M = cor(data)

corrplot(M, method="ellipse")
```

